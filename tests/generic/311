#! /bin/bash
# FS QA Test No. 311
#
# Run various fsync tests with dm flakey in freeze() mode and non freeze()
# mode. The idea is that we do random writes and randomly fsync and verify that
# after a fsync() followed by a freeze()+failure or just failure that the file
# is correct.  We remount the file system after the failure so that the file
# system can do whatever cleanup it needs to and md5sum the file to make sure
# it matches hat it was before the failure.  We also fsck to make sure the file
# system is consistent.
#
# The fsync tester just random writes into prealloc or not, and then fsync()s
# randomly or sync()'s randomly and then fsync()'s before exit.  There are a few
# tests that were handcrafted to reproduce bugs in btrfs, so it's also a
# regression test of sorts.
#
#-----------------------------------------------------------------------
# Copyright (c) 2013 Fusion IO. All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------
#

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
status=1	# failure is the default!

_cleanup()
{
	# If dmsetup load fails then we need to make sure to do resume here
	# otherwise the umount will hang
	$DMSETUP_PROG resume flakey-test > /dev/null 2>&1
	$UMOUNT_PROG $SCRATCH_MNT > /dev/null 2>&1
	$DMSETUP_PROG remove flakey-test > /dev/null 2>&1
}
trap "_cleanup; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common/rc
. ./common/filter

# real QA test starts here
_supported_fs generic
_supported_os Linux
_need_to_be_root
_require_scratch
_require_dm_flakey

[ -x $here/src/fsync-tester ] || _notrun "fsync-tester not build"

rm -f $seqres.full
BLK_DEV_SIZE=`blockdev --getsz $SCRATCH_DEV`
FLAKEY_DEV=/dev/mapper/flakey-test
SEED=1
testfile=$SCRATCH_MNT/$seq.fsync
FLAKEY_TABLE="0 $BLK_DEV_SIZE flakey $SCRATCH_DEV 0 180 0"
FLAKEY_TABLE_DROP="0 $BLK_DEV_SIZE flakey $SCRATCH_DEV 0 0 180 1 drop_writes"
_TEST_OPTIONS=""

_mount_flakey()
{
	mount -t $FSTYP $MOUNT_OPTIONS $FLAKEY_DEV $SCRATCH_MNT
}

_unmount_flakey()
{
	$UMOUNT_PROG $SCRATCH_MNT
}

_load_flakey_table()
{
	# _load_flakey_table <table>

	table="$FLAKEY_TABLE"
	[ $1 -eq 1 ] && table="$FLAKEY_TABLE_DROP"

	suspend_opt=""
	[ $nolockfs -eq 1 ] && suspend_opt="--nolockfs"

	$DMSETUP_PROG suspend $suspend_opt flakey-test
	[ $? -ne 0 ] && _fatal "failed to suspend flakey-test"

	$DMSETUP_PROG load flakey-test --table "$table"
	[ $? -ne 0 ] && _fatal "failed to load table into flakey-test"

	$DMSETUP_PROG resume flakey-test
	[ $? -ne 0 ] && _fatal  "failed to resumeflakey-test"
}

_run_test()
{
	# _run_test <testnum> <0 - buffered | 1 - O_DIRECT>
	allow_writes=0
	drop_writes=1
	test_num=$1

	direct_opt=""
	[ $2 -eq 1 ] && direct_opt="-d"

	$here/src/fsync-tester -s $SEED -t $test_num $direct_opt $testfile
	[ $? -ne 0 ] && _fatal "fsync tester exited abnormally"

	_md5_checksum $testfile
	_load_flakey_table $drop_writes
	_unmount_flakey

	#Ok mount so that any recovery that needs to happen is done
	_load_flakey_table $allow_writes
	_mount_flakey
	_md5_checksum $testfile

	#Unmount and fsck to make sure we got a valid fs after replay
	_unmount_flakey
	_check_scratch_fs
	[ $? -ne 0 ] && _fatal "fsck failed"

	_mount_flakey
}

_scratch_mkfs >> $seqres.full 2>&1

# Create a basic flakey device that will never error out
$DMSETUP_PROG create flakey-test --table "$FLAKEY_TABLE"
[ $? -ne 0 ] && _fatal "failed to create flakey device"

_mount_flakey

buffered=0
direct=1

for i in $(seq 1 20); do
	nolockfs=0
	SEED=$i
	echo "Running test $i buffered, normal suspend"
	_run_test $i $buffered
	echo "Running test $i direct, normal suspend"
	_run_test $i $direct

	nolockfs=1
	echo "Running test $i buffered, nolockfs"
	_run_test $i $buffered
	echo "Running test $i direct, nolockfs"
	_run_test $i $direct
done

status=0
exit

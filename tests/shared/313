#! /bin/bash
# FSQA Test No. 313
#
# fsync(2)/fdatasync(2) integrity test
# Run hwflush-check simulate disk failure
#
#-----------------------------------------------------------------------
# (c) 2013 Dmitry Monakhov
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
#-----------------------------------------------------------------------
#

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!

# get standard environment, filters and checks
. ./common/rc
. ./common/filter
_supported_fs ext3 ext4 xfs btrfs reiserfs
_supported_os Linux
_need_to_be_root
_require_scratch
_require_fail_make_request
[ -x $here/src/hwflush-check ] || _notrun "hwflush-check not build"

# TODO: Function are common enough to be moved to common/blkdev
SCRATCH_REAL_DEV=`readlink -f $SCRATCH_DEV`
SCRATCH_BDEV=`basename $SCRATCH_REAL_DEV`
RUN_TIME=3
allow_fail_make_request()
{
    echo "Allow global fail_make_request feature"
    echo 100 > $DEBUGFS_MNT/fail_make_request/probability
    echo 9999999 > $DEBUGFS_MNT/fail_make_request/times
    echo 0 >  /sys/kernel/debug/fail_make_request/verbose
}

disallow_fail_make_request()
{
    echo "Disallow global fail_make_request feature"
    echo 0 > $DEBUGFS_MNT/fail_make_request/probability
    echo 0 > $DEBUGFS_MNT/fail_make_request/times
}

start_fail_scratch_dev()
{
    echo "Force SCRATCH_DEV device failure"
    echo " echo 1 > /sys/block/$SCRATCH_BDEV/make-it-fail" >> $seqres.full
    echo 1 > /sys/block/$SCRATCH_BDEV/make-it-fail
}

stop_fail_scratch_dev()
{
    echo "Make SCRATCH_DEV device operable again"
    echo " echo 0 > /sys/block/$SCRATCH_BDEV/make-it-fail" >> $seqres.full
    echo 0 > /sys/block/$SCRATCH_BDEV/make-it-fail
}

_cleanup()
{
    stop_fail_scratch_dev
    disallow_fail_make_request
}
trap "_cleanup; exit \$status" 1 2 3 15

_run_one()
{
	client_args=$@
	echo ""
	echo "Stage 0: start hwflush-check server"

	$here/src/hwflush-check -l >> $seqres.full 2>&1 &
	server_pid=$!

	_scratch_mkfs >> $seqres.full 2>&1 || _fail "mkfs failed"
	_scratch_mount || _fail "mount failed"
	allow_fail_make_request

	echo "Stage 1: hwflush-check client prepare args= $client_args" \
	    | tee -a $seqres.client.full
	run_check $here/src/hwflush-check -s 127.0.0.1 -d $SCRATCH_MNT --prep \
	    $client_args >> $seqres.client.full 2>&1

	echo "Stage 2: hwflush-check client run args= $client_args" \
	    | tee -a $seqres.client.full
	$here/src/hwflush-check -s 127.0.0.1 -d $SCRATCH_MNT \
	     $client_args >> $seqres.client.full 2>&1 &
	client_pid=$!

	# Let's it work for awhile, and force device failure
	sleep $RUN_TIME

	start_fail_scratch_dev
	wait $client_pid

	# We expect that broken FS still can be umounted
	run_check umount $SCRATCH_DEV
	# Once filesystem was umounted no one is able to write to block device
	# It is now safe to bring device back to normal state
	stop_fail_scratch_dev
	disallow_fail_make_request
	run_check _scratch_mount

	echo "Stage 3: hwflush-check client check args= $client_args" \
	    | tee -a $seqres.client.full
	# Send signal to server that it should exit after client finished it's job.
	kill $server_pid
	$here/src/hwflush-check -s 127.0.0.1 -d $SCRATCH_MNT --check \
	     $client_args >> $seqres.client.full 2>&1
	ret=$?
	[ $ret -ne 0 ] && _fail "client exit with $ret"

	wait $server_pid
	ret=$?
	[ $ret -ne 0 ] && _fail "server exit with $ret"

	_scratch_unmount
	_check_scratch_fs
}


# Simplest and most reliable testcase
# write to preallocated file and use fsync(2)
_run_one "-t30  -b 40960 -f0 -a2"


# Use default blocksize = 16*1024 -8 and fsync(2)
_run_one "-t30  -n1024 -f0 -a0"
_run_one "-t30  -n1024 -f0 -a1"
_run_one "-t30  -n1024 -f0 -a2"
# Same as previous group, but with fdatasync(2)
_run_one "-t30  -n1024 -f1 -a0"
_run_one "-t30  -n1024 -f1 -a1"
_run_one "-t30  -n1024 -f1 -a2"

status=$?
